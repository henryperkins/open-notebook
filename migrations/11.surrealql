-- Migration 11: Align batch schemas, strengthen indexing, and fix vector search output

-- Align batch tables with shared ObjectModel timestamp expectations
DEFINE FIELD IF NOT EXISTS created ON TABLE batch_upload TYPE datetime DEFAULT time::now() VALUE $before OR time::now();
DEFINE FIELD IF NOT EXISTS updated ON TABLE batch_upload TYPE datetime DEFAULT time::now() VALUE time::now();
DEFINE FIELD IF NOT EXISTS created ON TABLE batch_source_relationship TYPE datetime DEFAULT time::now() VALUE $before OR time::now();
DEFINE FIELD IF NOT EXISTS updated ON TABLE batch_source_relationship TYPE datetime DEFAULT time::now() VALUE time::now();

UPDATE batch_upload SET
    created = created ?? created_at ?? time::now(),
    updated = updated ?? updated_at ?? time::now();

UPDATE batch_source_relationship SET
    created = created ?? created_at ?? time::now(),
    updated = updated ?? updated_at ?? time::now();

REMOVE FIELD IF EXISTS created_at ON TABLE batch_upload;
REMOVE FIELD IF EXISTS updated_at ON TABLE batch_upload;
REMOVE FIELD IF EXISTS created_at ON TABLE batch_source_relationship;
REMOVE FIELD IF EXISTS updated_at ON TABLE batch_source_relationship;

-- Refresh source deletion cascade to clean up batch relationships, too
REMOVE EVENT IF EXISTS source_delete ON TABLE source;
DEFINE EVENT IF NOT EXISTS source_delete ON TABLE source WHEN ($after == NONE) THEN {
    delete source_embedding where source == $before.id;
    delete source_insight where source == $before.id;
    delete batch_source_relationship where source_id == $before.id;
};

-- Add supporting indexes for frequent relationship lookups
DEFINE INDEX IF NOT EXISTS idx_source_embedding_source ON TABLE source_embedding COLUMNS source;
DEFINE INDEX IF NOT EXISTS idx_source_insight_source ON TABLE source_insight COLUMNS source;
DEFINE INDEX IF NOT EXISTS idx_reference_out ON TABLE reference COLUMNS out;
DEFINE INDEX IF NOT EXISTS idx_artifact_out ON TABLE artifact COLUMNS out;
DEFINE INDEX IF NOT EXISTS idx_batch_rel_batch_status ON TABLE batch_source_relationship COLUMNS batch_id, status;

DEFINE INDEX IF NOT EXISTS idx_source_embedding_embedding ON TABLE source_embedding
    FIELDS embedding
    HNSW
    DIMENSION 1536
    DIST COSINE;
DEFINE INDEX IF NOT EXISTS idx_source_insight_embedding ON TABLE source_insight
    FIELDS embedding
    HNSW
    DIMENSION 1536
    DIST COSINE;
DEFINE INDEX IF NOT EXISTS idx_note_embedding ON TABLE note
    FIELDS embedding
    HNSW
    DIMENSION 1536
    DIST COSINE;

-- Rebuild vector search helper to emit snippet arrays instead of character lists
REMOVE FUNCTION IF EXISTS fn::vector_search;
DEFINE FUNCTION IF NOT EXISTS fn::vector_search(
    $query: array<float>,
    $match_count: int,
    $sources: bool,
    $show_notes: bool,
    $min_similarity: float
) {
    let $source_embedding_search =
        IF $sources {(
            SELECT
                source.id AS id,
                source.title AS title,
                [content] AS matches,
                source.id AS parent_id,
                vector::similarity::cosine(embedding, $query) AS similarity
            FROM source_embedding
            WHERE embedding != none
              AND array::len(embedding) = array::len($query)
              AND vector::similarity::cosine(embedding, $query) >= $min_similarity
            ORDER BY similarity DESC
            LIMIT $match_count
        )}
        ELSE { [] };

    let $source_insight_search =
        IF $sources {(
            SELECT
                id,
                insight_type + ' - ' + (source.title OR '') AS title,
                [content] AS matches,
                source.id AS parent_id,
                vector::similarity::cosine(embedding, $query) AS similarity
            FROM source_insight
            WHERE embedding != none
              AND array::len(embedding) = array::len($query)
              AND vector::similarity::cosine(embedding, $query) >= $min_similarity
            ORDER BY similarity DESC
            LIMIT $match_count
        )}
        ELSE { [] };

    let $note_content_search =
        IF $show_notes {(
            SELECT
                id,
                title,
                [content] AS matches,
                id AS parent_id,
                vector::similarity::cosine(embedding, $query) AS similarity
            FROM note
            WHERE embedding != none
              AND array::len(embedding) = array::len($query)
              AND vector::similarity::cosine(embedding, $query) >= $min_similarity
            ORDER BY similarity DESC
            LIMIT $match_count
        )}
        ELSE { [] };

    let $all_results = array::union(
        array::union($source_embedding_search, $source_insight_search),
        $note_content_search
    );

    RETURN (
        SELECT
            id,
            parent_id,
            title,
            math::max(similarity) AS similarity,
            array::distinct(array::flatten(array::group(matches))) AS matches
        FROM $all_results
        WHERE id IS NOT NONE
        GROUP BY id, parent_id, title
        ORDER BY similarity DESC
        LIMIT $match_count
    );
};
