-- Rollback Migration 11

-- Restore previous vector search helper
REMOVE FUNCTION IF EXISTS fn::vector_search;
DEFINE FUNCTION IF NOT EXISTS fn::vector_search($query: array<float>, $match_count: int, $sources: bool, $show_notes: bool, $min_similarity: float) {
    let $source_embedding_search = 
        IF $sources {(
            SELECT 
                source.id as id,
                source.title as title,
                content,
                source.id as parent_id,
                vector::similarity::cosine(embedding, $query) as similarity
            FROM source_embedding 
            WHERE embedding != none and array::len(embedding)=array::len($query) AND
                 vector::similarity::cosine(embedding, $query) >= $min_similarity
            ORDER BY similarity DESC
            LIMIT $match_count
        )}
        ELSE { [] };

    let $source_insight_search = 
        IF $sources {(
            SELECT 
                id,
                insight_type + ' - ' + (source.title OR '') as title,
                content,
                source.id as parent_id,
                vector::similarity::cosine(embedding, $query) as similarity
            FROM source_insight
             WHERE embedding != none and array::len(embedding)=array::len($query) AND
            vector::similarity::cosine(embedding, $query) >= $min_similarity
            ORDER BY similarity DESC
            LIMIT $match_count
        )}
        ELSE { [] };


    let $note_content_search = 
        IF $show_notes {(
            SELECT 
                id,
                title,
                content,
                id as parent_id,
                vector::similarity::cosine(embedding, $query) as similarity
            FROM note
            WHERE embedding != none and array::len(embedding)=array::len($query) AND
            vector::similarity::cosine(embedding, $query) >= $min_similarity
            ORDER BY similarity DESC
            LIMIT $match_count
        )}
        ELSE { [] };


    let $all_results = array::union(
        array::union($source_embedding_search, $source_insight_search),
        $note_content_search
    );


    RETURN (select id, parent_id, title, math::max(similarity) as similarity,
    array::flatten(content) as matches
    from $all_results where id is not None
    group by id, parent_id, title ORDER BY similarity DESC LIMIT $match_count);

};

-- Drop vector indexes
REMOVE INDEX IF EXISTS idx_source_embedding_embedding ON TABLE source_embedding;
REMOVE INDEX IF EXISTS idx_source_insight_embedding ON TABLE source_insight;
REMOVE INDEX IF EXISTS idx_note_embedding ON TABLE note;

-- Drop relational indexes introduced in migration 11
REMOVE INDEX IF EXISTS idx_source_embedding_source ON TABLE source_embedding;
REMOVE INDEX IF EXISTS idx_source_insight_source ON TABLE source_insight;
REMOVE INDEX IF EXISTS idx_reference_out ON TABLE reference;
REMOVE INDEX IF EXISTS idx_artifact_out ON TABLE artifact;
REMOVE INDEX IF EXISTS idx_batch_rel_batch_status ON TABLE batch_source_relationship;

-- Revert source delete event to earlier definition
REMOVE EVENT IF EXISTS source_delete ON TABLE source;
DEFINE EVENT IF NOT EXISTS source_delete ON TABLE source WHEN ($after == NONE) THEN {
    delete source_embedding where source == $before.id;
    delete source_insight where source == $before.id;
};

-- Recreate original timestamp fields on batch tables
DEFINE FIELD IF NOT EXISTS created_at ON TABLE batch_upload TYPE datetime DEFAULT time::now();
DEFINE FIELD IF NOT EXISTS updated_at ON TABLE batch_upload TYPE datetime DEFAULT time::now();
DEFINE FIELD IF NOT EXISTS created_at ON TABLE batch_source_relationship TYPE datetime DEFAULT time::now();
DEFINE FIELD IF NOT EXISTS updated_at ON TABLE batch_source_relationship TYPE datetime DEFAULT time::now();

UPDATE batch_upload SET
    created_at = created ?? time::now(),
    updated_at = updated ?? time::now();

UPDATE batch_source_relationship SET
    created_at = created ?? time::now(),
    updated_at = updated ?? time::now();

REMOVE FIELD IF EXISTS created ON TABLE batch_upload;
REMOVE FIELD IF EXISTS updated ON TABLE batch_upload;
REMOVE FIELD IF EXISTS created ON TABLE batch_source_relationship;
REMOVE FIELD IF EXISTS updated ON TABLE batch_source_relationship;
